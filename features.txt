# pg

Print content in white and get an input with a tag. The default tag is 'egg'.

```python
>>> input_string = pg('Hello world!', "my-console-application")
Hello world!
$my-console-application> Hi
>>> input_string
'Hi'
```

# get

Get an input, with a tag.

```python
>>> input_string = get("my-console-application")
$my-console-application> Hi
>>> input_string
'Hi'
```

# put

Print content in a certain eggdriver color. The default color is white. You can set the color to "" to reset the color.
You can also set an ending string using the `end` parameter.

```python
put("Hi", "", ";")
```

```bash
Hi;
```

# sleep

Wait a certain number of milliseconds.

```python
sleep(1000) # sleep for 1 second
```

# clearConsole

Clear the console.

```python
clearConsole() # clear the console
```

# display

Display a text in the console each certain number of milliseconds, while a condition is true.
The default condition is `True`.	

```python
display("Hello world!", 1000, 1 > 0) # display the text "Hello world!" for 1 second
```

Each 1 second:

```bash
Hello world!
```

# sysCommand

Execute a python command. (Currently only for Windows).

```python
sysCommand("-m pip install --upgrade pip") # execute the command "py -m pip install --upgrade pip"
```

# ProgressBar

A progress bar pip-like for console implementations.

```python
>>> bar = ProgressBar()
>>> bar.iterate(printPercent = True)
|████████████████████████████████|      100%
```

## ProgressBar.bar

Returns a ProgressBar as a text, with a certain length and percent of progress.

```python
>>> p_bar = ProgressBar()
>>> text = p_bar.bar(0.5, 16)
>>> text
|████████        |      50%
```

~ this will not be shown ~